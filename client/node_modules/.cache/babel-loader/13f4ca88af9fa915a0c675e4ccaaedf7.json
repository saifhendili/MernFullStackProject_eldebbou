{"ast":null,"code":"import axios from 'axios';\nimport { SetAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, CLEAR_PROFILE, LOGOUT } from './Types';\nimport setAuthToken from '../utils/setAuthToken';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  firstname,\n  lastname,\n  email,\n  password,\n  password2,\n  birthday,\n  typeuser\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    firstname,\n    lastname,\n    email,\n    password,\n    password2,\n    birthday,\n    typeuser\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(SetAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(SetAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/saifh/OneDrive/Desktop/Authentification-master/Authentification-master/client/src/actions/auth.js"],"names":["axios","SetAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","CLEAR_PROFILE","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","firstname","lastname","email","password","password2","birthday","typeuser","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { SetAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  CLEAR_PROFILE,\n  LOGOUT,\n\n} from './Types';\nimport setAuthToken from '../utils/setAuthToken';\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\nexport const register = ({\n  firstname,\n  lastname,\n  email,\n  password,\n  password2,\n  birthday,\n  typeuser,\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({\n    firstname,\n    lastname,\n    email,\n    password,\n    password2,\n    birthday,\n    typeuser,\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(SetAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(SetAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout / Clear Profile\nexport const logout = () => (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}